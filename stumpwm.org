* stumpwm
:PROPERTIES:
:tangle: ~/.stumpwmrc
:END:
[[https://github.com/stumpwm/stumpwm][StumpWM]] is a window manager written in Common Lisp.

** General
#+BEGIN_SRC lisp
  (in-package :stumpwm)

  (set-prefix-key (kbd "C-\\"))

  (setf *message-window-gravity* :center
        ,*input-window-gravity* :center
        ,*debug-level* 10
        ,*mode-line-position* :bottom
        ,*mouse-focus-policy* :click)
#+END_SRC

** Key bindings
#+BEGIN_SRC lisp
  (defcommand (fprev tile-group) () ()
    "Cycle through the frame tree to the previous frame."
    (focus-prev-frame (current-group)))

  (define-key *root-map* (kbd "O") "fprev")
#+END_SRC

** Emacs-like keybindings
*** List buffers/windows
#+BEGIN_SRC lisp
  (define-key *root-map* (kbd "b") "windowlist")
  (define-key *root-map* (kbd "C-b") "windowlist")

  (define-key *groups-map* (kbd "b") "grouplist")
  (define-key *groups-map* (kbd "C-b") "grouplist")
#+END_SRC

*** Split frame
#+BEGIN_SRC lisp
  (define-key *root-map* (kbd "3") "hsplit")
  (define-key *root-map* (kbd "2") "vsplit")
  (define-key *root-map* (kbd "1") "only")
  (define-key *root-map* (kbd "0") "remove")
#+END_SRC
** Mode line
A head is a physical monitor. A screen is a section of video memory
that heads are mapped on to.  When using Xinerama you generally have 1
screen and many heads.  When not using Xinerama each screen is a
physical monitor so you have many screens with only one head on them.

Turn on mode-line in all heads since I'm using Xinerama:
#+BEGIN_SRC elisp
  (if (not (head-mode-line (current-head)))
      (enable-mode-line (current-screen) (current-head) t))
#+END_SRC

#+END_SRC
** Utils
#+BEGIN_SRC lisp
  (defun global-set-key (key command)
    "Define a global keybinding (use `*top-map*')"
    (define-key *top-map* key command))
  (setf *mouse-focus-policy* :click)

  (defun cat (&rest strings)
    "Concatenate strings like the Unix command 'cat'.
  A shortcut for (concatenate 'string foo bar)."
    (apply 'concatenate 'string strings))

  (defun shell-command (command)
    "Run a shell command and display output to screen.
  This must be used in a functional side-effects-free style! If a program does not
  exit of its own accord, Stumpwm might hang!"
    (check-type command string)
    (echo-string (current-screen) (run-shell-command command t)))
#+END_SRC

** Programs
*** Web browser
#+BEGIN_SRC lisp
    (defparameter WEB-BROWSER "exec firefox" "Default web browser")

    (defcommand browse (&optional url-string) ((:string "URL (optional): "))
      "Browse URL-STRING using WEB-BROWSER"
      (check-type url-string string)
      (let ((cmd (if (> (length url-string) 0)
                     (cat WEB-BROWSER " " "\"" url-string "\"")
                   WEB-BROWSER)))
        (run-shell-command cmd)))
#+END_SRC

*** Terminal
#+BEGIN_SRC lisp
  (defparameter X-TERM "exec urxvt" "Default terminal")
  (define-key *root-map* (kbd "c") X-TERM)
  (define-key *root-map* (kbd "C-c") X-TERM)

  (setf *shell-program* (stumpwm:getenv "SHELL"))
#+END_SRC

*** Emacs
#+BEGIN_SRC lisp
  (defparameter EMACS "exec e" "Emacs executable")
  (define-key *root-map* (kbd "e") EMACS)
  (define-key *root-map* (kbd "C-e") EMACS)
#+END_SRC

*** Stats
#+BEGIN_SRC lisp
  (defparameter *disk-usage-command*
    "df -h | grep home | tr -s '[:blank:]' ' ' | cut -d ' ' -f2-5")

  (defcommand disk-usage () ()
    "Show disk usage in the screen."
    (shell-command *disk-usage-command*))

  (define-key *root-map* (kbd "u") "disk-usage")
#+END_SRC
** Control keys
*** Volume
#+BEGIN_SRC lisp
  (global-set-key (kbd "XF86AudioRaiseVolume") "exec amixer set Master 2%+")
  (global-set-key (kbd "XF86AudioLowerVolume") "exec amixer set Master 2%-")
#+END_SRC

*** Switch windows
#+BEGIN_SRC lisp
  (global-set-key (kbd "s-Tab") "pull-hidden-next")
#+END_SRC
