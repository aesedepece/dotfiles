* xmonad

#+BEGIN_SRC haskell :tangle ~/.xmonad/xmonad.hs :mkdirp true
  import System.IO (hPutStrLn)
  import System.Exit
  
  import qualified Data.Map as M
  import Data.Ratio ((%))
  
  import XMonad
  import XMonad.Util.Scratchpad
  import XMonad.Hooks.DynamicLog
  import XMonad.Hooks.ManageDocks
  import XMonad.Hooks.ManageHelpers
  
  -- Layouts
  import XMonad.Layout.Spacing
  import XMonad.Layout.Fullscreen
  import XMonad.Layout.NoBorders
  import XMonad.Layout.PerWorkspace
  import XMonad.Layout.SimplestFloat
  import XMonad.Layout.Tabbed
  import XMonad.Layout.ResizableTile
  import XMonad.Layout.Circle
  import XMonad.Layout.Grid
  import XMonad.Layout.ThreeColumns
  import XMonad.Util.WorkspaceCompare
  
  -- window rules
  import XMonad.Actions.FloatKeys
  
  -- status bar
  import XMonad.Hooks.DynamicLog hiding (xmobar, xmobarPP,  xmobarColor)
  import qualified XMonad.Actions.FlexibleResize as FlexibleResize
  import XMonad.Util.Run(spawnPipe)
  import XMonad.Util.EZConfig(additionalKeys)
  import qualified XMonad.StackSet as W
  
  main = do
    xmproc <- spawnPipe "xmobar ~/.xmonad/xmobarrc.hs"
    xmonad $ defaultConfig {
        modMask = mod4Mask
        , workspaces = ikameWorkspaces
        , focusFollowsMouse = False
        , terminal = ikameTerminal
        , manageHook = ikameManageHook
        , keys = ikameKeys
        , mouseBindings = ikameMouseBindings
        , borderWidth = 1
        , normalBorderColor = "#004358"
        , focusedBorderColor = "#ffa72c"
        , layoutHook = smartBorders $ ikameLayout
        , logHook = dynamicLogWithPP $ xmobarPP {
                                                ppOutput = hPutStrLn xmproc
                                                , ppSort = fmap (.scratchpadFilterOutWorkspace) getSortByTag
                                                , ppCurrent = wrap "<fc=#ffa72c>" "</fc>" . (\wsId -> wsId)
                                                , ppWsSep = " "
                                                , ppTitle = (\str -> "")
                                                , ppLayout = (\str -> "")
                                                , ppVisible = wrap "<fc=#ffa72c>(" ")</fc>" . (\wsId -> wsId)
                                                , ppHidden = wrap "<fc=#004358>" ".</fc>" . (\wsId -> wsId)
                                                , ppHiddenNoWindows = xmobarColor "#004358" ""}
        }
  
  ikameWorkspaces = ["1", "2", "3" , "4", "5"]
  ikameWorkspacesKeys = [xK_1, xK_2, xK_3, xK_4, xK_5]
  ikameTerminal = "urxvt"
  ikameScratchPad = ikameTerminal
  ikameLauncher = "~/.launcher"
  
  tabConfig = defaultTheme {
    activeColor         = "#fdf6e3"
    , inactiveColor       = "#fdf6e3"
    , activeBorderColor   = "#fdf6e3"
    , inactiveBorderColor = "#fdf6e3"
    , activeTextColor     = "#ffa72c"
    , inactiveTextColor   = "#004358"
    , fontName            = "xft:Terminus:pixelsize=12:antialias=true:embolden=true"
    , decoHeight          = 14
  }
  
  ikameManageHook = composeAll
      [ className =? "MPlayer"        --> doFloat
      , className =? "Gimp"           --> doFloat
      , resource =? "feh"             --> doFloat
      , resource =? "skype"           --> doFloat
      , resource =? "steam"           --> doFloat
      , resource =? "spotify"         --> doFloat
      , resource =? "emacs"           --> doShift (ikameWorkspaces !! 0)
      , resource =? "chromium"        --> doShift (ikameWorkspaces !! 1)
      , resource =? "zathura"         --> doShift (ikameWorkspaces !! 2)
      ] <+> manageScratchPad
  
  manageScratchPad :: ManageHook
  manageScratchPad = scratchpadManageHook (W.RationalRect l t w h)
    where
      h = 0.6     -- terminal height
      w = 1       -- terminal width
      t = 0.2     -- distance from top edge
      l = 0       -- distance from left edge
  
  ikameKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $
      -- launch a terminal
      [ ((modm,               xK_Return), spawn $ XMonad.terminal conf)
  
      , ((modm,               xK_p     ), spawn ikameLauncher)
  
      -- volume control
      , ((modm,               xK_i ), spawn "amixer set Master playback 2%+")
      , ((modm,               xK_d), spawn "amixer set Master playback 2%-")
  
      -- lock screen
      , ((modm,               xK_0), spawn "slock")
  
      -- change background
      , ((modm,               xK_g), spawn "~/bin/wallpaper.sh")
  
      -- scratchpad
      , ((modm,               xK_s     ), scratchPad)
  
      -- screenshots
      , ((0,                  xK_Print),  screenshot)
  
      -- close focused window
      , ((modm .|. shiftMask, xK_c     ), kill)
  
       -- Rotate through the available layout algorithms
      , ((modm,               xK_space ), sendMessage NextLayout)
  
      --  Reset the layouts on the current workspace to default
      , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)
  
      -- Resize viewed windows to the correct size
      , ((modm,               xK_n     ), refresh)
  
      -- Move focus to the next window
      , ((modm,               xK_Tab   ), windows W.focusDown)
  
      -- Move focus to the next window
      , ((modm,               xK_j     ), windows W.focusDown)
  
      -- Move focus to the previous window
      , ((modm,               xK_k     ), windows W.focusUp  )
  
      -- Move focus to the master window
      , ((modm,               xK_m     ), windows W.focusMaster  )
  
      -- Swap the focused window and the master window
      , ((modm .|. shiftMask, xK_m), windows W.swapMaster)
  
      -- Swap the focused window with the next window
      , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )
  
      -- Swap the focused window with the previous window
      , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )
  
      -- Shrink the master area
      , ((modm,               xK_h     ), sendMessage Shrink)
  
      -- Expand the master area
      , ((modm,               xK_l     ), sendMessage Expand)
  
      -- Push window back into tiling
      , ((modm,               xK_t     ), withFocused $ windows . W.sink)
  
      -- Increment the number of windows in the master area
      , ((modm              , xK_comma ), sendMessage (IncMasterN 1))
  
      -- Deincrement the number of windows in the master area
      , ((modm              , xK_period), sendMessage (IncMasterN (-1)))
  
      -- , ((modm,               xK_h     ), withFocused (keysResizeWindow (10, 0) (0, 0)))
      -- , ((modm,               xK_v     ), withFocused (keysResizeWindow (0, 10) (0, 0)))
      -- , ((modm,               xK_a     ), withFocused (keysAbsResizeWindow (10, 10) (0, 0)))
      -- , ((modm .|. shiftMask, xK_h     ), withFocused (keysResizeWindow (-10, 0) (0, 0)))
      -- , ((modm .|. shiftMask, xK_v     ), withFocused (keysResizeWindow (0, -10) (0, 0)))
      -- , ((modm .|. shiftMask, xK_a     ), withFocused (keysAbsResizeWindow (-10, -10) (0, 0)))
  
      -- center floating window
      , ((modm,               xK_c     ), withFocused (keysMoveWindowTo (0, 0) (-1%2, -1%2)))
  
      -- Quit xmonad
      , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))
  
      -- Reload xmonad
      , ((modm,               xK_q     ), spawn "xmonad --recompile; xmonad --restart")
      ]
  
      ++
  
      --
      -- mod-[1..9], Switch to workspace N
      -- mod-shift-[1..9], Move client to workspace N
      --
      [((m .|. modm, k), windows $ f i)
          | (i, k) <- zip (XMonad.workspaces conf) ikameWorkspacesKeys
          , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
  
      ++
  
      -- mod-{w,e,r} %! Switch to physical/Xinerama screens 1, 2, or 3
      -- mod-shift-{w,e,r} %! Move client to screen 1, 2, or 3
      [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
          | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
          , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
  
    where
      scratchPad = scratchpadSpawnActionTerminal ikameScratchPad
      screenshot = spawn "scrot -s 'mv $f ~/screenshots'"
  
  ikameMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $
    [
      -- mod-<button 1> Set the window to floating mode and move by dragging
      ((modm, button1), (\w -> focus w >> mouseMoveWindow w))
      -- mod-button2, Raise the window to the top of the stack
      , ((modm, button2), (\w -> focus w >> windows W.swapMaster))
      -- mod-<button 3> Set the window to floating mode and resize by dragging
      , ((modm, button3), (\w -> focus w >> mouseResizeWindow w))
    ]
  
  
  ikameLayout = onWorkspace (ikameWorkspaces !! 0) (avoidStruts (tiledSpace ||| tiled ||| fullTile) ||| fullScreen)
                $ onWorkspace (ikameWorkspaces !! 1) (avoidStruts (tiledSpace ||| tiled ||| borderlessTile ||| tabbedSpace) ||| fullScreen)
                $ onWorkspace (ikameWorkspaces !! 2) (avoidStruts gridded)
                $ avoidStruts (tiled ||| gridded ||| tiledSpace ||| tiled ||| bigMonitor ||| borderlessTile ||| simplestFloat)
    where
      fullTile       = ResizableTall nmaster delta ratio []
      fullScreen     = noBorders(fullscreenFull Full)
      tabbedSpace    = tabbed shrinkText tabConfig
      tiled          = spacing 15 $ ResizableTall nmaster delta ratio []
      tiledSpace     = spacing 40 $ ResizableTall nmaster delta ratio []
      bigMonitor     = spacing 5 $ ThreeColMid nmaster delta ratio
      borderlessTile = noBorders(fullTile)
      gridded        = spacing 20 $ Grid
      -- Default number of windows in master pane
      nmaster = 1
      -- Percent of the screen to increment when resizing
      delta = 5/100
      -- Default proportion of the screen taken up by main pane
      ratio = toRational (2/(1 + sqrt 5 :: Double))
  
#+END_SRC
#+BEGIN_SRC haskell :tangle ~/.xmonad/xmobarrc.hs :mkdirp true
  Config { font = "xft:Wendy:pixelsize=30:antialias=true:embolden=true"
         , bgColor = "#fdf6e3"
         , fgColor = "#004358"
         , position = BottomW C 100
         , lowerOnStart = True
         , commands = [ Run StdinReader
                      , Run Date "%I:%M %a %_d" "date" 10
                      ]
         , sepChar = "%"
         , alignSep = "}{"
         , template = "} %StdinReader% { %date%"
         }
#+END_SRC
