* Bin
** dmenu_run
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle ~/.local/bin/dmenu_run :mkdirp true
  /usr/bin/dmenu_run -p "ÏŸ" -fn "DejaVu Sans Mono-9:antialias=true"
#+END_SRC
** Screen layouts
*** Default
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle ~/.local/bin/sdefault :mkdirp true
  xrandr --output HDMI1 --off --output DP1 --off --output eDP1 --mode 1920x1080 --pos 0x0 --rotate normal --output VGA1 --off
#+END_SRC
*** At home
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle ~/.local/bin/shome :mkdirp true
  xrandr --output HDMI1 --primary --mode 1920x1080 --output eDP1 --mode 1920x1080 --left-of HDMI1
#+END_SRC
*** At work
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle ~/.local/bin/swork :mkdirp true
  xrandr --output HDMI1 --off --output VIRTUAL1 --off --output DP1 --primary --mode 1920x1080 --pos 1920x0 --rotate normal --output eDP1 --mode 1920x1080 --pos 0x0 --rotate normal --output VGA1 --off
#+END_SRC
** Emacs diff tool
#+BEGIN_SRC sh :shebang #!/bin/bash :tangle ~/.local/bin/ediff :mkdirp true
  if [ ! ${#} -ge 2 ]; then
      echo 1>&2 "Usage: ${0} LOCAL REMOTE [MERGED BASE]"
      echo 1>&2 "       (LOCAL, REMOTE, MERGED, BASE can be provided by \`git mergetool'.)"
      exit 1
  fi
  
  # tools
  _EMACSCLIENT=`which emacsclient`
  _BASENAME=`basename`
  _CP=`cp`
  _EGREP=`egrep`
  _MKTEMP=`mktemp`
  
  # args
  _LOCAL=${1}
  _REMOTE=${2}
  if [ ${3} ] ; then
      _MERGED=${3}
  else
      _MERGED=${_REMOTE}
  fi
  if [ ${4} -a -r ${4} ] ; then
      _BASE=${4}
      _EDIFF=ediff-merge-files-with-ancestor
      _EVAL="${_EDIFF} \"${_LOCAL}\" \"${_REMOTE}\" \"${_BASE}\" nil \"${_MERGED}\""
  elif [ ${_REMOTE} = ${_MERGED} ] ; then
      _EDIFF=ediff
      _EVAL="${_EDIFF} \"${_LOCAL}\" \"${_REMOTE}\""
  else
      _EDIFF=ediff-merge-files
      _EVAL="${_EDIFF} \"${_LOCAL}\" \"${_REMOTE}\" nil \"${_MERGED}\""
  fi
  
  # console vs. X
  if [ "${TERM}" = "linux" ]; then
      unset DISPLAY
      _EMACSCLIENTOPTS="-t"
  else
      _EMACSCLIENTOPTS="-c"
  fi
  
  # run emacsclient
  ${_EMACSCLIENT} ${_EMACSCLIENTOPTS} -a "" -e "(${_EVAL})" 2>&1
  
  # check modified file
  if [ ! $(egrep -c '^(<<<<<<<|=======|>>>>>>>|####### Ancestor)' ${_MERGED}) = 0 ]; then
      _MERGEDSAVE=$(${_MKTEMP} --tmpdir `${_BASENAME} ${_MERGED}`.XXXXXXXXXX)
      ${_CP} ${_MERGED} ${_MERGEDSAVE}
      echo 1>&2 "Oops! Conflict markers detected in $_MERGED."
      echo 1>&2 "Saved your changes to ${_MERGEDSAVE}"
      echo 1>&2 "Exiting with code 1."
      exit 1
  fi
  
  exit 0
#+END_SRC
** Emacs pipe tool
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle ~/.local/bin/emp :mkdirp true
    # -*- coding: utf-8 -*-
    # -*- Shell -*-

    NAME=`basename $0`
    BUFFER="*stdin*"
    function show_usage {
        echo "usage: <command that produces output> | $NAME [buffer-name]"
        exit 1
    }

    function input_to_file {
        while IFS= read -r line
        do
            echo "$line" >> $1
        done
    }

    function pipe_to_emacs {
        buffer=${1:-$BUFFER}
        file=`mktemp`
        input_to_file $file
        emacsclient -n --eval "(switch-to-buffer \"$buffer\")" --eval "(insert-file-contents \"$file\" nil nil nil t)" >/dev/null
        rm -f file
    }

    if [ $# -gt 1 ]; then
        show_usage
    else
        pipe_to_emacs $1
    fi
#+END_SRC
** Enumerate
#+BEGIN_SRC sh :shebang #!/bin/bash :tangle ~/.local/bin/enum :mkdirp true
  #
  # examples:
  # enumerate filename
  # ... | enumerate
  # enumerate <(...)
  #
  
  NAME=`basename $0`
  
  function show_usage {
      echo <<EOF
  usage: $NAME filename
  
  Examples:
  enum filename
  ... | enum
  enum <(...)
  EOF
      exit 1
  }
  
  counter=1
  function enumerate {
      while read line; do
          echo "$((counter++)): $line"
      done
  }
  
  if [ $# -eq 0 ]; then
      enumerate
  elif [ ! -e $1 ]; then
      echo "$NAME: file doesn't exist."
      show_usage
  else
      # redefine stdin to come from whatever file is named by the first
      # command-line argument
      exec 0<$1
  
      enumerate
  fi
#+END_SRC
** Wallpaper
Set a random wallpaper:
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle ~/.local/bin/random-wallpaper :mkdirp true
  IMAGES_DIR=$HOME/pictures
  
  feh --bg-scale $IMAGES_DIR/`ls $IMAGES_DIR | sort -R | tail -n 1`
#+END_SRC
** Capture screen
Capture screen with scrot. If an argument is provided the screenshot
will be named *<argument>.png*, else it's going to be *last-capture.png*:
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle ~/.local/bin/capture :mkdirp true
  if [ $# -eq 1 ]; then
      filename=$1
  else
      filename='last-capture'
  fi
  
  scrot -s -e "mv \$f ~/screenshots/$filename.png"
#+END_SRC
** Tangle
Tangle all the org files in a directory:
#+BEGIN_SRC sh :shebang #!/bin/sh :tangle ~/.local/bin/tangle :mkdirp true
  if [ $# -eq 0 ]; then
      dir=`pwd`
  else
      dir=$1
  fi
  
  FILES=""
  # wrap each argument in the code required to call tangle on it
  for i in `ls | grep \.org`; do
      FILES="$FILES \"$i\""
  done
  
  read -r -d '' TANGLE <<EOF
  (progn
       (require 'org)
       (require 'ob)
       (require 'ob-tangle)
       (mapc (lambda (file)
               (find-file (expand-file-name file "$dir"))
               (org-babel-tangle)
               (kill-buffer))
             '($FILES)))
  EOF
  
  emacs -Q --batch --eval "$TANGLE"
#+END_SRC
** Work IRC                                                           :crypt:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2.0.22 (GNU/Linux)

hQEMAxWSuK3W+kssAQf+PSRz1Zq+Gq52C4uFZ+s9j3FF+CsA6Z7As/QMb00XsbCd
zHInpoT7gvEffsXtRDGsEHTZCOaEa4dzaxSNc9U4BqJwJYS5yFZ/Xs6JGBjeSAWN
smc3Fy7jajW/P+z2Xq0ZDikFcrogUmmk75YbOCb6SL15EvXPL5ScHl022gFHkMo8
pEc26e3wcdbgCh4O9M6b1vnanEOXu7EmMG5jNjA0vQhQXAte25dascMeYbdt78Ze
K7sodOWw2Hs7/r2kQBQ1qEOBUXU598gA0FQu9FM05fJXESUfGnwRZLEvhmP5QHhc
6J6snoMrgfR1qW8a+KjylCpaUP9hXGD3LkXOHa9dkNLAZAF+d3+c2T0zxBVTraRI
KftmUwGzPkWz+fZPv8Oc/PEgEjTeBetqBKTSbBu11VY+WGtgjRGSE05lBfRmNujk
y4Dm3+865GXhvnoi4WjiBKesX7YMudzC/0X5rHGpQwmNwtdDkjrQTa7iqO6NF8OK
LLbfHGcZGFfwPIkt4tfXyKjjko98hYYIEQ+iUpezag4WgTsy/42rfCWYzXvsfeBg
a0vWBPasMd37XGWSZ43gYt3KfSVexvWQEeBQV6gUwFCkIWcVV96Q5nsvLBxWAEBf
0cD7KMrKw4pWBzNWmKlgvu4kovF6y4VB1ZQ+c7+qpnY/s09EjjyCIXSJKPZOv/GF
M4u5MUCCU8saOCvewxP9IyLACQKZUj4Hp1JouTqpANMCI4LLxkk=
=CevY
-----END PGP MESSAGE-----
