* Window Manager
** dunst
:PROPERTIES:
:tangle: ~/.config/dunst/dunstrc
:mkdirp: true
:END:
#+BEGIN_SRC conf
  [global]
      font = Monospace 8
  
      # allow a small subset of html markup:
      # <b>bold</b>
      # <i>italic</i>
      # <s>strikethrough<s/>
      # <u>underline</u>
      #
      # for a complete reference see http://developer.gnome.org/pango/stable/PangoMarkupFormat.html
      # If markup is not allowed, those tags will be stripped out of the message.
      allow_markup = yes
  
      # The format of the message. Possible variables are:
      #   %a  appname
      #   %s  summary
      #   %b  body
      #   %i  iconname (including its path)
      #   %I  iconname (without its path)
      #   %p  progress value if set ([  0%] to [100%]) or nothing
      # Markup is allowed
      format = "<b>%s</b>\n%b"
  
      # Sort messages by urgency
      sort = yes
  
      # Show how many messages are currently hidden (because of geometry)
      indicate_hidden = yes
  
      # alignment of message text.
      # Possible values are "left", "center" and "right"
      alignment = left
  
      # The frequency with wich text that is longer than the notification
      # window allows bounces back and forth.
      # This option conflicts with 'word_wrap'.
      # Set to 0 to disable
      bounce_freq = 0
  
      # show age of message if message is older than show_age_threshold seconds.
      # set to -1 to disable
      show_age_threshold = 60
  
      # split notifications into multiple lines if they don't fit into geometry
      word_wrap = yes
  
      # ignore newlines '\n' in notifications
      ignore_newline = no
  
  
      # the geometry of the window
      # geometry [{width}]x{height}][+/-{x}+/-{y}]
      # The geometry of the message window.
      # The height is measured in number of notifications everything else in pixels. If the width
      # is omitted but the height is given ("-geometry x2"), the message window
      # expands over the whole screen (dmenu-like). If width is 0,
      # the window expands to the longest message displayed.
      # A positive x is measured from the left, a negative from the
      # right side of the screen.  Y is measured from the top and down respectevly.
      # The width can be negative. In this case the actual width is the
      # screen width minus the width defined in within the geometry option.
      geometry = "300x5-30+20"
  
      # The transparency of the window. range: [0; 100]
      # This option will only work if a compositing windowmanager is present (e.g. xcompmgr, compiz, etc..)
      transparency = 0
  
      # Don't remove messages, if the user is idle (no mouse or keyboard input)
      # for longer than idle_threshold seconds.
      # Set to 0 to disable.
      idle_threshold = 120
  
      # Which monitor should the notifications be displayed on.
      monitor = 0
  
      # Display notification on focused monitor. Possible modes are:
      # mouse: follow mouse pointer
      # keyboard: follow window with keyboard focus
      # none: don't follow anything
      #
      # "keyboard" needs a windowmanager that exports the _NET_ACTIVE_WINDOW property.
      # This should be the case for almost all modern windowmanagers.
      #
      # If this option is set to mouse or keyboard, the monitor option will be
      # ignored.
      follow = mouse
  
      # should a notification popped up from history be sticky or
      # timeout as if it would normally do.
      sticky_history = yes
  
      # The height of a single line. If the height is smaller than the font height,
      # it will get raised to the font height.
      # This adds empty space above and under the text.
      line_height = 0
  
      # Draw a line of 'separatpr_height' pixel height between two notifications.
      # Set to 0 to disable
      separator_height = 2
  
      # padding between text and separator
      padding = 8
  
      # horizontal padding
      horizontal_padding = 8
  
      # Define a color for the separator.
      # possible values are:
      #  * auto: dunst tries to find a color fitting to the background
      #  * foreground: use the same color as the foreground
      #  * frame: use the same color as the frame.
      #  * anything else will be interpreted as a X color
      separator_color = frame
  
      # print a notification on startup
      # This is mainly for error detection, since dbus (re-)starts dunst
      # automatically after a crash.
      startup_notification = false
  
      # dmenu path
      dmenu = /usr/bin/dmenu -p dunst:
  
      # browser for opening urls in context menu
      browser = /usr/bin/firefox -new-tab
  
  [frame]
      width = 3
      color = "#aaaaaa"
  
  [shortcuts]
      # shortcuts are specified as [modifier+][modifier+]...key
      # available modifiers are 'ctrl', 'mod1' (the alt-key), 'mod2', 'mod3'
      # and 'mod4' (windows-key)
      # xev might be helpful to find names for keys
  
      # close notification
      # close = ctrl+space
      close = mod4+space
  
      # close all notifications
      # close_all = ctrl+shift+space
      close_all = mod4+n
  
      # redisplay last message(s)
      # On the US keyboard layout 'grave' is normally above TAB and left of '1'.
      # history = ctrl+grave
      history = mod4+grave
  
      # context menu
      context = ctrl+shift+period
  
  [urgency_low]
      # IMPORTANT: colors have to be defined in quotation marks.
      # Otherwise the '#' and following  would be interpreted as a comment.
      background = "#222222"
      foreground = "#888888"
      timeout = 10
  
  [urgency_normal]
      background = "#285577"
      foreground = "#ffffff"
      timeout = 10
  
  [urgency_critical]
      background = "#900000"
      foreground = "#ffffff"
      timeout = 0
  
  
  # Every section that isn't one of the above is interpreted as a rules
  # to override settings for certain messages.
  # Messages can be matched by 'appname', 'summary', 'body' or 'icon'
  # and you can override the 'timeout', 'urgency', 'foreground', 'background'
  # and 'format'.
  # Shell-like globbing will get expanded.
  #
  # SCRIPTING
  # you can specify a script that gets run when the rule matches by setting
  # the 'script' option.
  # The script will be called as follows:
  # script appname summary body icon urgency
  # where urgency can be "LOW", "NORMAL" or "CRITICAL".
  #
  # NOTE: if you don't want a notification to be displayed, set the format to ""
  # NOTE: It might be helpful to run dunst -print in a terminal in order to find
  # fitting options for rules.
  
  #[espeak]
  #    summary = "*"
  #    script = dunst_espeak.sh
  
  #[script-test]
  #    summary = "*script*"
  #    script = dunst_test.sh
  
  #[ignore]
  ## This notification will not be displayed
  #    summary = "foobar"
  #    format = ""
  
  #[signed_on]
  #    appname = Pidgin
  #    summary = "*signed on*"
  #    urgency = low
  #
  #[signed_off]
  #    appname = Pidgin
  #    summary = *signed off*
  #    urgency = low
  #
  #[says]
  #    appname = Pidgin
  #    summary = *says*
  #    urgency = critical
  #
  #[twitter]
  #    appname = Pidgin
  #    summary = *twitter.com*
  #    urgency = normal
  #
#+END_SRC
** compton
:PROPERTIES:
:tangle: ~/.compton.conf
:END:

#+BEGIN_SRC conf
  # Shadow
  shadow = false;              # Enabled client-side shadows on windows.
  no-dock-shadow = true;      # Avoid drawing shadows on dock/panel windows.
  no-dnd-shadow = true;       # Don't draw shadows on DND windows.
  clear-shadow = true;        # Zero the part of the shadow's mask behind the window (experimental).
  shadow-radius = 7;      # The blur radius for shadows. (default 12)
  shadow-offset-x = -7;       # The left offset for shadows. (default -15)
  shadow-offset-y = -7;       # The top offset for shadows. (default -15)
  # shadow-opacity = 0.7;     # The translucency for shadows. (default .75)
  # shadow-red = 0.0;     # Red color value of shadow. (0.0 - 1.0, defaults to 0)
  # shadow-green = 0.0;       # Green color value of shadow. (0.0 - 1.0, defaults to 0)
  # shadow-blue = 0.0;        # Blue color value of shadow. (0.0 - 1.0, defaults to 0)
  shadow-exclude = [ "n:e:Notification", "class_g = 'conky'" ];    # Exclude conditions for shadows.
  shadow-ignore-shaped = true;
  
  # Opacity
  menu-opacity = 0.9;         # The opacity for menus. (default 1.0)
  # inactive-opacity = 0.9;         # Opacity of inactive windows. (0.1 - 1.0)
  #frame-opacity = 0.8;           # Opacity of window titlebars and borders. (0.1 - 1.0)
  inactive-opacity-override = true;   # Inactive opacity set by 'inactive-opacity' overrides value of _NET_WM_OPACITY.
  
  # Fading
  # fading = true;          # Fade windows during opacity changes.
  # fade-delta = 5;         # The time between steps in a fade in milliseconds. (default 10).
  # fade-in-step = 0.02;        # Opacity change between steps while fading in. (default 0.028).
  # fade-out-step = 0.02;       # Opacity change between steps while fading out. (default 0.03).
  # no-fading-openclose = true;   # Fade windows in/out when opening/closing.
  
  # Other
  #inactive-dim = 0.5;        # Dim inactive windows. (0.0 - 1.0, defaults to 0).
  mark-wmwin-focused = true;  # Try to detect WM windows and mark them as active.
  mark-ovredir-focused = true;
  detect-rounded-corners = true;
  
  # Window type settings
  wintypes:
  {
    tooltip = { fade = true; shadow = false; opacity = 0.75; };
  };
#+END_SRC
